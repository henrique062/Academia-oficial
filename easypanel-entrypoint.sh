#!/bin/sh
set -e

# Verificar vari√°veis de ambiente
echo "Checking environment variables..."
if [ -z "$DATABASE_URL" ]; then
  # Se DATABASE_URL n√£o estiver definido, tentar constru√≠-lo
  if [ -z "$DB_HOST" ] || [ -z "$POSTGRES_PASSWORD" ]; then
    echo "ERRO: Nem DATABASE_URL nem DB_HOST/POSTGRES_PASSWORD est√£o definidos."
    echo "Configure corretamente as vari√°veis de ambiente no EasyPanel."
    echo "Continuando com configura√ß√£o padr√£o, mas provavelmente falhar√°..."
    export DB_HOST="localhost"
    export POSTGRES_PASSWORD="postgres"
  fi
  
  echo "Construindo DATABASE_URL com DB_HOST=$DB_HOST"
  export DATABASE_URL="postgres://postgres:${POSTGRES_PASSWORD}@${DB_HOST}:5432/tripulante"
fi

echo "DATABASE_URL configurado (oculto por seguran√ßa)"

# Verificar se as vari√°veis do Supabase est√£o definidas
echo "Verificando configura√ß√£o do Supabase..."
if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_ROLE_KEY" ]; then
  echo "‚úÖ Credenciais do Supabase configuradas atrav√©s das vari√°veis de ambiente"
else
  # Se n√£o estiverem definidas nas vari√°veis de ambiente, usar as definidas no Dockerfile
  if [ -z "$SUPABASE_URL" ]; then
    echo "‚ö†Ô∏è SUPABASE_URL n√£o definida nas vari√°veis de ambiente, usando valor padr√£o do Dockerfile"
  fi
  
  if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
    echo "‚ö†Ô∏è SUPABASE_SERVICE_ROLE_KEY n√£o definida nas vari√°veis de ambiente, usando valor padr√£o do Dockerfile"
  fi
fi

# Exibir informa√ß√µes parciais do Supabase para verifica√ß√£o
if [ -n "$SUPABASE_URL" ]; then
  SUPABASE_URL_PREFIX=$(echo "$SUPABASE_URL" | cut -c1-20)
  echo "üîå Conectando ao Supabase: ${SUPABASE_URL_PREFIX}..."
fi

# Aguardar pela disponibilidade do banco de dados
echo "Tentando conectar ao PostgreSQL..."
MAX_RETRIES=30
RETRY_COUNT=0

# Extrair o host do DATABASE_URL
DB_HOST_FROM_URL=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\).*/\1/p')
if [ -z "$DB_HOST_FROM_URL" ]; then
  DB_HOST_FROM_URL=${DB_HOST:-localhost}
fi

echo "Verificando conex√£o com banco de dados em $DB_HOST_FROM_URL..."

until pg_isready -h "$DB_HOST_FROM_URL" -U postgres; do
  RETRY_COUNT=$((RETRY_COUNT+1))
  if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
    echo "PostgreSQL indispon√≠vel ap√≥s $MAX_RETRIES tentativas - continuando mesmo assim"
    break
  fi
  echo "PostgreSQL indispon√≠vel - tentativa $RETRY_COUNT de $MAX_RETRIES, aguardando..."
  sleep 5
done

if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
  echo "PostgreSQL est√° respondendo - executando migra√ß√µes do banco de dados"
else
  echo "AVISO: N√£o foi poss√≠vel verificar a conex√£o com o PostgreSQL. A aplica√ß√£o pode falhar."
fi

# Executar migra√ß√£o e atualiza√ß√£o do banco de dados
echo "Executando migra√ß√µes do banco de dados..."

# Primeiro, tenta fazer o push normal do schema com Drizzle
npm run db:push || {
  echo "Falha no push do Drizzle. Verificando conex√£o e permiss√µes do banco de dados."
  echo "Tentando novamente em 5 segundos..."
  sleep 5
  npm run db:push || {
    echo "Falha no push do Drizzle novamente. Tentando m√©todo alternativo de atualiza√ß√£o de schema..."
    
    # Se o push falhar, tenta rodar o script de atualiza√ß√£o personalizado
    NODE_ENV=production node dist/scripts/update-schema.js || {
      echo "Falha no script de atualiza√ß√£o de schema. A aplica√ß√£o ser√° iniciada mesmo assim."
    }
  }
}

echo "==================================================="
echo "TRIPULANTE DASHBOARD - INICIANDO EM MODO PRODU√á√ÉO"
echo "Ambiente: ${NODE_ENV:-production}"
echo "Banco de dados: PostgreSQL externo (via DATABASE_URL)"
echo "Host do Banco: $DB_HOST_FROM_URL"
if [ -n "$SUPABASE_URL" ]; then
  echo "Supabase: Configurado e ativo"
else
  echo "Supabase: N√£o configurado ou usando valores padr√£o"
fi
echo "==================================================="

# Iniciar a aplica√ß√£o
echo "Iniciando aplica√ß√£o..."
exec "$@"
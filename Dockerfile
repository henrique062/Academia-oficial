# Est√°gio de build
FROM node:20-alpine AS builder

WORKDIR /build

# Instalar depend√™ncias do sistema necess√°rias para o build
RUN apk add --no-cache python3 make g++

# Copiar arquivos de depend√™ncias primeiro (para aproveitar o cache do Docker)
COPY package*.json ./

# Instalar explicitamente o @vitejs/plugin-react primeiro para garantir que esteja dispon√≠vel
RUN npm install @vitejs/plugin-react --save-dev

# Tentar instalar o plugin do Replit como opcional (n√£o falhar se n√£o estiver dispon√≠vel)
RUN npm install @replit/vite-plugin-runtime-error-modal --save-dev --no-fund --no-audit || echo "Plugin do Replit n√£o dispon√≠vel, continuando sem ele..."

# Instalar o swagger-jsdoc explicitamente
RUN npm install swagger-jsdoc swagger-ui-express --save

# Instalar todas as depend√™ncias (incluindo devDependencies)
RUN npm ci

# Criar diret√≥rio de scripts se n√£o existir
RUN mkdir -p scripts

# Copiar c√≥digo fonte
COPY . .

# Verificar se vitest.config.ts existe e remov√™-lo para build de produ√ß√£o
RUN if [ -f "vitest.config.ts" ]; then mv vitest.config.ts vitest.config.ts.bak; fi

# Remover refer√™ncias ao plugin do Replit dos arquivos de configura√ß√£o
RUN echo "üîç Verificando e removendo refer√™ncias ao plugin do Replit..."
RUN grep -r "@replit/vite-plugin-runtime-error-modal" --include="*.ts" --include="*.js" . || echo "Nenhuma refer√™ncia encontrada"
RUN find . -type f -name "*.ts" -o -name "*.js" | xargs sed -i 's/.*@replit\/vite-plugin-runtime-error-modal.*//g' || echo "Sem altera√ß√µes"
RUN find . -type f -name "*.ts" -o -name "*.js" | xargs sed -i '/import\s*{\s*}\s*from/d' || echo "Sem importa√ß√µes vazias"

# Verificar se o plugin react est√° dispon√≠vel antes de prosseguir
RUN ls -la node_modules/@vitejs || echo "Diret√≥rio @vitejs n√£o encontrado!"
RUN ls -la node_modules/@vitejs/plugin-react || echo "Plugin react n√£o encontrado!"

# Compilar o c√≥digo TypeScript e os assets
RUN NODE_ENV=production npm run build

# Aplicar corre√ß√µes ap√≥s o build para tornar o swagger opcional
COPY scripts/fix-swagger-deps.js /build/scripts/fix-swagger-deps.js
RUN node /build/scripts/fix-swagger-deps.js

# Restaurar vitest.config.ts se foi removido
RUN if [ -f "vitest.config.ts.bak" ]; then mv vitest.config.ts.bak vitest.config.ts; fi

# Verificar a estrutura do diret√≥rio ap√≥s o build
RUN ls -la dist/ || echo "Diret√≥rio dist n√£o encontrado"
RUN ls -la dist/public/ || echo "Diret√≥rio dist/public n√£o encontrado"
RUN ls -la dist/server/ || echo "Diret√≥rio dist/server n√£o encontrado"

# Remover devDependencies para reduzir o tamanho da imagem final
RUN npm prune --production

# Est√°gio de produ√ß√£o
FROM node:20-alpine AS production

WORKDIR /app

# Instalar ferramentas necess√°rias em produ√ß√£o (reduzidas sem PostgreSQL)
RUN apk add --no-cache curl wget busybox-extras jq

# Copiar artefatos do build
COPY --from=builder /build/dist ./dist
COPY --from=builder /build/node_modules ./node_modules
COPY --from=builder /build/package*.json ./

# Verificar estrutura ap√≥s a c√≥pia
RUN ls -la
RUN ls -la dist/ || echo "Diret√≥rio dist n√£o encontrado"
RUN ls -la dist/server/ || echo "Diret√≥rio dist/server n√£o encontrado"
RUN ls -la dist/public/ || echo "Diret√≥rio dist/public n√£o encontrado"

# Criar diret√≥rios para scripts
RUN mkdir -p scripts/supabase

# Copiar scripts necess√°rios
COPY --from=builder /build/scripts ./scripts
COPY easypanel-entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Garantir que scripts de corre√ß√£o tenham permiss√£o de execu√ß√£o
RUN chmod +x ./scripts/fix-build.js || echo "Script de build n√£o encontrado"
RUN [ ! -f "./scripts/easypanel-fix.sh" ] && echo '#!/bin/sh\n\
# Verificar e criar diret√≥rio public se n√£o existir\n\
if [ ! -d "/app/dist/public" ]; then\n\
  mkdir -p /app/dist/public\n\
  echo "Diret√≥rio public criado em /app/dist/public"\n\
fi\n\
# Copiar arquivos est√°ticos para o local correto se necess√°rio\n\
if [ -d "/app/dist/server/public" ] && [ ! -d "/app/dist/public" ]; then\n\
  cp -r /app/dist/server/public/* /app/dist/public/\n\
  echo "Arquivos copiados de dist/server/public para dist/public"\n\
fi\n\
echo "Script de corre√ß√£o para o EasyPanel executado com sucesso!"' > /app/scripts/easypanel-fix.sh || true
RUN chmod +x ./scripts/easypanel-fix.sh || echo "N√£o foi poss√≠vel criar script de corre√ß√£o"

# Criar arquivos de configura√ß√£o vazios (ignorando se j√° existem)
RUN touch .env.example drizzle.config.ts

# Ajustar permissions para scripts
RUN find /app/scripts -type f -name "*.sh" -exec chmod +x {} \;

# Configurar vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3000

# ======================================================
# IMPORTANTE: Voc√™ DEVE configurar estas vari√°veis no EasyPanel:
# - SUPABASE_URL: URL do seu projeto Supabase
# - SUPABASE_SERVICE_ROLE_KEY: Chave de servi√ßo do Supabase
# 
# A aplica√ß√£o N√ÉO funcionar√° corretamente sem estas credenciais.
# Voc√™ pode configur√°-las como vari√°veis de ambiente no EasyPanel.
# ======================================================

# Verifica√ß√£o de sa√∫de mais robusta
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget -q --spider http://localhost:3000/api/health || curl -f http://localhost:3000/api/health || exit 1

# Expor porta
EXPOSE 3000

# Usar script de inicializa√ß√£o modificado para EasyPanel
ENTRYPOINT ["./entrypoint.sh"]
CMD ["node", "dist/server/index.js"]